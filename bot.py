# bot.py
import asyncio
import logging
from telethon import TelegramClient
from telethon.sessions import StringSession
import re
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_ID = 'your_api_id'
API_HASH = 'your_api_hash'
BOT_TOKEN = 'your_bot_token'
ADMIN_ID = 7773057702

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('bot_session', API_ID, API_HASH)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class GiftRentalBot:
    def __init__(self):
        self.gift_pattern = re.compile(r'/gift\s+(\S+)\s+([^]+?)\s+(\d+)\s+(\d+)\s+(\S+)\s+(\S+)\s+(\S+)')
    
    async def start(self):
        await client.start(bot_token=BOT_TOKEN)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        @client.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            if event.sender_id == ADMIN_ID:
                await event.reply(
                    "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å GiftUp\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/gift [—Å—Å—ã–ª–∫–∞] [–º–æ–¥–µ–ª—å] [–¥–Ω–∏] [—Ü–µ–Ω–∞] [—Ñ–æ–Ω] [—É–∑–æ—Ä] [–≤–∏–¥–µ–æ] - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫\n"
                    "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    "/gifts - –°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"
                )
            else:
                await event.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftUp! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.")
        
        @client.on(events.NewMessage)
        async def message_handler(event):
            if event.sender_id != ADMIN_ID:
                return
                
            message = event.message.text
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /gift
            if message.startswith('/gift'):
                await self.handle_gift_command(event, message)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
            elif message == '/stats':
                await self.handle_stats_command(event)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /gifts
            elif message == '/gifts':
                await self.handle_gifts_command(event)
        
        await client.run_until_disconnected()
    
    async def handle_gift_command(self, event, message):
        match = self.gift_pattern.match(message)
        if not match:
            await event.reply(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/gift [—Å—Å—ã–ª–∫–∞_–Ω–∞_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] [–º–æ–¥–µ–ª—å] [–¥–Ω–∏] [—Ü–µ–Ω–∞] [—Ñ–æ–Ω] [—É–∑–æ—Ä] [—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–∏–¥–µ–æ]\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/gift https://example.com/image.jpg iPhone 15 Pro 7 1500 gradient stars https://example.com/video.mp4"
            )
            return
        
        try:
            image_url, model, days, price, background, pattern, video_url = match.groups()
            days = int(days)
            price = int(price)
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            gift_data = {
                'image': image_url,
                'model': model,
                'days': days,
                'price': price,
                'background': background,
                'pattern': pattern,
                'video': video_url
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Supabase (–Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)
            # await self.add_gift_to_supabase(gift_data)
            
            await event.reply(
                f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üéÅ –ú–æ–¥–µ–ª—å: {model}\n"
                f"üìÖ –î–Ω–µ–π: {days}\n"
                f"üí∞ –¶–µ–Ω–∞: {price} TON\n"
                f"üé® –§–æ–Ω: {background}\n"
                f"‚ú® –£–∑–æ—Ä: {pattern}\n"
                f"üé• –í–∏–¥–µ–æ: {video_url}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞: {e}")
            await event.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞")
    
    async def handle_stats_command(self, event):
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Supabase
        stats = await self.get_stats_from_supabase()
        
        await event.reply(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GiftUp\n\n"
            f"üéÅ –í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {stats['total_gifts']}\n"
            f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥: {stats['active_rentals']}\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {stats['total_revenue']} TON"
        )
    
    async def handle_gifts_command(self, event):
        gifts = await self.get_gifts_from_supabase()
        
        if not gifts:
            await event.reply("üì≠ –ü–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        message = "üéÅ –°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤:\n\n"
        for gift in gifts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            message += f"‚Ä¢ {gift['model']} - {gift['price']} TON\n"
        
        if len(gifts) > 10:
            message += f"\n... –∏ –µ—â–µ {len(gifts) - 10} –ø–æ–¥–∞—Ä–∫–æ–≤"
        
        await event.reply(message)
    
    async def add_gift_to_supabase(self, gift_data):
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Supabase
        pass
    
    async def get_stats_from_supabase(self):
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        return {
            'total_gifts': 0,
            'active_rentals': 0,
            'total_users': 0,
            'total_revenue': 0
        }
    
    async def get_gifts_from_supabase(self):
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤
        return []

async def main():
    bot = GiftRentalBot()
    await bot.start()

if __name__ == '__main__':
    asyncio.run(main())
