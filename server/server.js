const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const cors = require('cors');
const fs = require('fs');

const app = express();
app.use(cors());
app.use(express.json());

// –î–∞–Ω–Ω—ã–µ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
let users = {};
let gifts = [];
let authSessions = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤
app.get('/api/gifts', (req, res) => {
    res.json(gifts);
});

// API –¥–ª—è –∞—Ä–µ–Ω–¥—ã –ø–æ–¥–∞—Ä–∫–∞
app.post('/api/rent', (req, res) => {
    const { giftId, userId } = req.body;
    
    // –õ–æ–≥–∏–∫–∞ –∞—Ä–µ–Ω–¥—ã
    const gift = gifts.find(g => g.id === giftId);
    if (gift) {
        if (!users[userId]) {
            users[userId] = { balance: 0, rentedGifts: [], myGifts: [] };
        }
        
        users[userId].rentedGifts.push(giftId);
        res.json({ success: true });
    } else {
        res.json({ success: false, error: '–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
});

// API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
app.post('/api/save-phone', (req, res) => {
    const { userId, phone } = req.body;
    
    if (!users[userId]) {
        users[userId] = {};
    }
    
    users[userId].phone = phone;
    res.json({ success: true });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId', (req, res) => {
    const userId = req.params.userId;
    const user = users[userId] || { balance: 0, rentedGifts: [], myGifts: [] };
    
    res.json({
        balance: user.balance || 0,
        rentedGifts: user.rentedGifts ? user.rentedGifts.length : 0,
        myGifts: user.myGifts ? user.myGifts.length : 0,
        phone: user.phone || null
    });
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Telegram
app.get('/api/telegram-status/:userId', (req, res) => {
    const userId = req.params.userId;
    const user = users[userId];
    
    res.json({
        connected: !!(user && user.telegramConnected)
    });
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram
app.post('/auth/request', async (req, res) => {
    const { phone } = req.body;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    const sessionId = Date.now().toString();
    authSessions[sessionId] = { phone, step: 'code_requested' };
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram API
    // –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è —á–∞—Å—Ç—å, —Ç—Ä–µ–±—É—é—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Client
    
    res.json({ requires_code: true, sessionId });
});

app.post('/auth/verify', async (req, res) => {
    const { code, sessionId } = req.body;
    
    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞
    // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    res.json({ success: true });
});

// –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤
bot.onText(/\/gift (.+)/, (msg, match) => {
    if (msg.from.id.toString() !== process.env.ADMIN_ID) {
        return bot.sendMessage(msg.chat.id, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }
    
    const params = match[1].split(' ');
    if (params.length < 6) {
        return bot.sendMessage(msg.chat.id, 
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gift [—Å—Å—ã–ª–∫–∞_–Ω–∞_—Ñ–æ—Ç–æ] [–ú–æ–¥–µ–ª—å] [–¥–Ω–∏] [—Ü–µ–Ω–∞] [—Ñ–æ–Ω] [—É–∑–æ—Ä] [—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–∏–¥–µ–æ]');
    }
    
    const gift = {
        id: Date.now(),
        image: params[0],
        model: params[1],
        days: parseInt(params[2]),
        price: parseFloat(params[3]),
        background: params[4],
        pattern: params[5],
        video: params[6] || '',
        addedBy: msg.from.id,
        addedAt: new Date().toISOString()
    };
    
    gifts.push(gift);
    bot.sendMessage(msg.chat.id, 
        `üéÅ –ü–æ–¥–∞—Ä–æ–∫ "${gift.model}" –¥–æ–±–∞–≤–ª–µ–Ω!\n` +
        `–¶–µ–Ω–∞: ${gift.price} TON\n` +
        `–°—Ä–æ–∫: ${gift.days} –¥–Ω–µ–π`);
});

app.listen(process.env.PORT || 3000, () => {
    console.log('Server running on port 3000');
});
