// auth-system.js
class AuthSystem {
    constructor() {
        this.authSteps = {};
    }
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
    async bindTelegram(userId) {
        const tg = window.Telegram.WebApp;
        
        tg.showPopup({
            title: "üîê –ü—Ä–∏–≤—è–∑–∫–∞ Telegram",
            message: "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            buttons: [
                {id: 'share_phone', type: 'default', text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'},
                {type: 'cancel', text: '‚ùå –û—Ç–º–µ–Ω–∞'}
            ]
        }, async (buttonId) => {
            if (buttonId === 'share_phone') {
                tg.requestContact(async (contact) => {
                    if (contact) {
                        await this.saveContact(contact, userId);
                        tg.showAlert("‚úÖ Telegram –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!");
                        this.updateUI(userId);
                    }
                });
            }
        });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Supabase
    async saveContact(contact, userId) {
        try {
            await window.supabaseClient.savePhoneNumber(userId, contact.phone_number);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –ø—Ä–∏–≤—è–∑–∫–∏
            const { error } = await supabaseClient.client
                .from('telegram_auth')
                .insert([{
                    user_id: userId,
                    phone: contact.phone_number,
                    auth_date: new Date().toISOString()
                }]);
                
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:", error);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏
    async checkAuthStatus(userId) {
        try {
            const { data, error } = await supabaseClient.client
                .from('telegram_auth')
                .select('*')
                .eq('user_id', userId)
                .single();
                
            return !!data;
        } catch (error) {
            return false;
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    async updateUI(userId) {
        const isConnected = await this.checkAuthStatus(userId);
        const statusElement = document.getElementById('telegramStatus');
        const buttonElement = document.getElementById('bindTelegramBtn');
        
        if (isConnected) {
            statusElement.textContent = '–ü—Ä–∏–≤—è–∑–∞–Ω';
            statusElement.className = 'status-connected';
            if (buttonElement) buttonElement.style.display = 'none';
        }
    }
}

window.authSystem = new AuthSystem();
